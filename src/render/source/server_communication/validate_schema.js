"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"type":"object","properties":{"type":{"type":"string","default":null,"nullable":true},"data":{"default":null,"nullable":true,"type":"object","properties":{"time":{"type":"number","default":null,"nullable":true}}}},"additionalProperties":false};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.type === undefined){data.type = null;}if(data.data === undefined){data.data = null;}const _errs1 = errors;for(const key0 in data){if(!((key0 === "type") || (key0 === "data"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){let data0 = data.type;const _errs2 = errors;if((typeof data0 !== "string") && (data0 !== null)){validate20.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;if(valid0){let data1 = data.data;const _errs5 = errors;if((!(data1 && typeof data1 == "object" && !Array.isArray(data1))) && (data1 !== null)){validate20.errors = [{instancePath:instancePath+"/data",schemaPath:"#/properties/data/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}if(errors === _errs5){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.time === undefined){data1.time = null;}let data2 = data1.time;if((!((typeof data2 == "number") && (isFinite(data2)))) && (data2 !== null)){validate20.errors = [{instancePath:instancePath+"/data/time",schemaPath:"#/properties/data/properties/time/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}}var valid0 = _errs5 === errors;}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}
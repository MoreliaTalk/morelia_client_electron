"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"type":"object","properties":{"type":{"type":"string","default":null,"nullable":true},"data":{"$ref":"data.json","default":null},"errors":{"$ref":"errors.json","default":null},"jsonapi":{"$ref":"jsonapi.json","default":null},"meta":{"$ref":"meta.json","default":null}},"additionalProperties":false};const schema25 = {"$id":"errors.json"};const schema26 = {"$id":"jsonapi.json"};const schema27 = {"$id":"meta.json"};const schema23 = {"$id":"data.json","nullable":true,"type":"object","properties":{"time":{"type":"integer","default":null,"nullable":true},"flow":{"$ref":"flow.json","default":null}}};const schema24 = {"$id":"flow.json","type":"object","properties":{"id":{"type":"integer"}}};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="data.json" */;let vErrors = null;let errors = 0;if((!(data && typeof data == "object" && !Array.isArray(data))) && (data !== null)){validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.time === undefined){data.time = null;}if(data.flow === undefined){data.flow = null;}let data0 = data.time;const _errs2 = errors;if((!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))) && (data0 !== null)){validate21.errors = [{instancePath:instancePath+"/time",schemaPath:"#/properties/time/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;if(valid0){let data1 = data.flow;const _errs5 = errors;const _errs6 = errors;if(errors === _errs6){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){if(data1.id !== undefined){let data2 = data1.id;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate21.errors = [{instancePath:instancePath+"/flow/id",schemaPath:"flow.json/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}}}else {validate21.errors = [{instancePath:instancePath+"/flow",schemaPath:"flow.json/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs5 === errors;}}}validate21.errors = vErrors;return errors === 0;}function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.type === undefined){data.type = null;}if(data.data === undefined){data.data = null;}if(data.errors === undefined){data.errors = null;}if(data.jsonapi === undefined){data.jsonapi = null;}if(data.meta === undefined){data.meta = null;}const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "type") || (key0 === "data")) || (key0 === "errors")) || (key0 === "jsonapi")) || (key0 === "meta"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){let data0 = data.type;const _errs2 = errors;if((typeof data0 !== "string") && (data0 !== null)){validate20.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;if(valid0){const _errs5 = errors;if(!(validate21(data.data, {instancePath:instancePath+"/data",parentData:data,parentDataProperty:"data",rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}var valid0 = _errs5 === errors;if(valid0){const _errs6 = errors;var valid0 = _errs6 === errors;if(valid0){const _errs7 = errors;var valid0 = _errs7 === errors;if(valid0){const _errs8 = errors;var valid0 = _errs8 === errors;}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}